// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_PUCE_URL")
}

model User {
  id          String    @id 

  travels Travel[]
  reviews Review[]
  favorites Favorite[]
  achievementsUsers AchievementUser[] 

  @@map("users")
}


model Avatar {
  id          Int    @id @default(autoincrement())
  imageLink   String @unique
  tripsCount  Int? 

  @@map("avatars")
}

model Travel {
  id          Int    @id @default(autoincrement())
  startDate   DateTime?
  endDate     DateTime?
  userId      String 
  destinationId   Int

  user User @relation(fields: [userId], references: [id])
  destination Destination @relation(fields: [destinationId], references: [id])

  @@map("travels")
}

model Review {
  userId      String
  destinationId   Int
  note        Int

  user User @relation(fields: [userId], references: [id])
  destination Destination @relation(fields: [destinationId], references: [id])

  @@unique(fields: [userId, destinationId], name:"reviewRelation")

  @@map("reviews")
}

model Favorite {
  userId      String
  destinationId   Int

  user User @relation(fields: [userId], references: [id])
  destination Destination @relation(fields: [destinationId], references: [id])

  @@unique(fields: [userId, destinationId], name:"favoriteRelation")
  @@map("favorites")
}

model Destination {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  imageLink   String  @unique
  countryId Int

  country Country @relation(fields: [countryId], references: [id])

  travels Travel[]
  reviews Review[]
  favorites Favorite[]
  tips Tip[]
  descriptions Description[]
  localization Localization[]

  @@map("destinies")
}

model Localization {
  id              Int     @id @default(autoincrement())
  lat             String
  lng             String
  destinationId   Int @unique

  destination Destination @relation(fields: [destinationId], references: [id])

  @@map("localizations")
}

model Continent {
  id          Int     @id @default(autoincrement())
  name        String  @unique

  contries Country[]

  @@map("continents")
}

model Country {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  continentId Int

  contnent Continent @relation(fields: [continentId], references: [id])

  destinations Destination[]

  @@map("countries")
}


model Description {
  id          Int     @id @default(autoincrement())
  destinationId   Int
  text        String
  type        String  

  destination Destination @relation(fields: [destinationId], references: [id]) 

  @@map("destinations")
}

model Tip {
  id          Int    @id @default(autoincrement())
  destinationId   Int
  description String

  destination Destination @relation(fields: [destinationId], references: [id])

  @@map("tips")
}

model Achievement {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  destinationId   Int?   @unique
  imageLink   String 
  count       Int?     @unique

  achievementsUsers AchievementUser[] 

  @@map("achievements")
}

model AchievementUser {
  userId        String
  achievementId Int


  user User @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique(fields: [userId, achievementId], name:"achievementRelation")

  @@map("achievementsUsers")
}